// Code generated by MockGen. DO NOT EDIT.
// Source: sender.go

// Package configtest is a generated GoMock package.
package configtest

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSenderSetter is a mock of SenderSetter interface
type MockSenderSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSenderSetterMockRecorder
}

// MockSenderSetterMockRecorder is the mock recorder for MockSenderSetter
type MockSenderSetterMockRecorder struct {
	mock *MockSenderSetter
}

// NewMockSenderSetter creates a new mock instance
func NewMockSenderSetter(ctrl *gomock.Controller) *MockSenderSetter {
	mock := &MockSenderSetter{ctrl: ctrl}
	mock.recorder = &MockSenderSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSenderSetter) EXPECT() *MockSenderSetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockSenderSetter) Set(chain, network, sender string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", chain, network, sender)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockSenderSetterMockRecorder) Set(chain, network, sender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSenderSetter)(nil).Set), chain, network, sender)
}
