// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package configtest is a generated GoMock package.
package configtest

import (
	gomock "github.com/golang/mock/gomock"
	etherscan "github.com/mailchain/mailchain/internal/clients/etherscan"
	ethrpc "github.com/mailchain/mailchain/internal/clients/ethrpc"
	reflect "reflect"
)

// MockClientsSetter is a mock of ClientsSetter interface
type MockClientsSetter struct {
	ctrl     *gomock.Controller
	recorder *MockClientsSetterMockRecorder
}

// MockClientsSetterMockRecorder is the mock recorder for MockClientsSetter
type MockClientsSetterMockRecorder struct {
	mock *MockClientsSetter
}

// NewMockClientsSetter creates a new mock instance
func NewMockClientsSetter(ctrl *gomock.Controller) *MockClientsSetter {
	mock := &MockClientsSetter{ctrl: ctrl}
	mock.recorder = &MockClientsSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientsSetter) EXPECT() *MockClientsSetterMockRecorder {
	return m.recorder
}

// SetClient mocks base method
func (m *MockClientsSetter) SetClient(client, network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClient", client, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClient indicates an expected call of SetClient
func (mr *MockClientsSetterMockRecorder) SetClient(client, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockClientsSetter)(nil).SetClient), client, network)
}

// MockClientsGetter is a mock of ClientsGetter interface
type MockClientsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClientsGetterMockRecorder
}

// MockClientsGetterMockRecorder is the mock recorder for MockClientsGetter
type MockClientsGetterMockRecorder struct {
	mock *MockClientsGetter
}

// NewMockClientsGetter creates a new mock instance
func NewMockClientsGetter(ctrl *gomock.Controller) *MockClientsGetter {
	mock := &MockClientsGetter{ctrl: ctrl}
	mock.recorder = &MockClientsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientsGetter) EXPECT() *MockClientsGetterMockRecorder {
	return m.recorder
}

// GetEtherRPC2Client mocks base method
func (m *MockClientsGetter) GetEtherRPC2Client(network string) (*ethrpc.EthRPC2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtherRPC2Client", network)
	ret0, _ := ret[0].(*ethrpc.EthRPC2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtherRPC2Client indicates an expected call of GetEtherRPC2Client
func (mr *MockClientsGetterMockRecorder) GetEtherRPC2Client(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtherRPC2Client", reflect.TypeOf((*MockClientsGetter)(nil).GetEtherRPC2Client), network)
}

// GetEtherscanClient mocks base method
func (m *MockClientsGetter) GetEtherscanClient() (*etherscan.APIClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtherscanClient")
	ret0, _ := ret[0].(*etherscan.APIClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtherscanClient indicates an expected call of GetEtherscanClient
func (mr *MockClientsGetterMockRecorder) GetEtherscanClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtherscanClient", reflect.TypeOf((*MockClientsGetter)(nil).GetEtherscanClient))
}

// GetEtherscanNoAuthClient mocks base method
func (m *MockClientsGetter) GetEtherscanNoAuthClient() (*etherscan.APIClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtherscanNoAuthClient")
	ret0, _ := ret[0].(*etherscan.APIClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtherscanNoAuthClient indicates an expected call of GetEtherscanNoAuthClient
func (mr *MockClientsGetterMockRecorder) GetEtherscanNoAuthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtherscanNoAuthClient", reflect.TypeOf((*MockClientsGetter)(nil).GetEtherscanNoAuthClient))
}
