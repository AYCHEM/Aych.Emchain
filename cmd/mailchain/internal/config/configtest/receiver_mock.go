// Code generated by MockGen. DO NOT EDIT.
// Source: receiver.go

// Package configtest is a generated GoMock package.
package configtest

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReceiverSetter is a mock of ReceiverSetter interface
type MockReceiverSetter struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverSetterMockRecorder
}

// MockReceiverSetterMockRecorder is the mock recorder for MockReceiverSetter
type MockReceiverSetterMockRecorder struct {
	mock *MockReceiverSetter
}

// NewMockReceiverSetter creates a new mock instance
func NewMockReceiverSetter(ctrl *gomock.Controller) *MockReceiverSetter {
	mock := &MockReceiverSetter{ctrl: ctrl}
	mock.recorder = &MockReceiverSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceiverSetter) EXPECT() *MockReceiverSetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockReceiverSetter) Set(chain, network, receiver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", chain, network, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockReceiverSetterMockRecorder) Set(chain, network, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockReceiverSetter)(nil).Set), chain, network, receiver)
}
