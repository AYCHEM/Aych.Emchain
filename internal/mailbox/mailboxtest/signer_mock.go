// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go

// Package mailboxtest is a generated GoMock package.
package mailboxtest

import (
	gomock "github.com/golang/mock/gomock"
	mailbox "github.com/mailchain/mailchain/internal/mailbox"
	reflect "reflect"
)

// MockSigner is a mock of Signer interface
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockSigner) Sign(opts mailbox.SignerOpts) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", opts)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockSignerMockRecorder) Sign(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigner)(nil).Sign), opts)
}

// MockSignerOpts is a mock of SignerOpts interface
type MockSignerOpts struct {
	ctrl     *gomock.Controller
	recorder *MockSignerOptsMockRecorder
}

// MockSignerOptsMockRecorder is the mock recorder for MockSignerOpts
type MockSignerOptsMockRecorder struct {
	mock *MockSignerOpts
}

// NewMockSignerOpts creates a new mock instance
func NewMockSignerOpts(ctrl *gomock.Controller) *MockSignerOpts {
	mock := &MockSignerOpts{ctrl: ctrl}
	mock.recorder = &MockSignerOptsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignerOpts) EXPECT() *MockSignerOptsMockRecorder {
	return m.recorder
}
