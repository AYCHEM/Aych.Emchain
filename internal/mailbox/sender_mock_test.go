// Copyright 2019 Finobo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: sender.go

// Package mailboxtest is a generated GoMock package.
package mailbox

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface
type mockSender struct {
	ctrl     *gomock.Controller
	recorder *mockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender
type mockSenderMockRecorder struct {
	mock *mockSender
}

// NewMockSender creates a new mock instance
func newMockSender(ctrl *gomock.Controller) *mockSender {
	mock := &mockSender{ctrl: ctrl}
	mock.recorder = &mockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockSender) EXPECT() *mockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *mockSender) Send(ctx context.Context, to, from, data []byte, signer Signer, opts SenderOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, to, from, data, signer, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *mockSenderMockRecorder) Send(ctx, to, from, data, signer, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*mockSender)(nil).Send), ctx, to, from, data, signer, opts)
}

// MockSenderOpts is a mock of SenderOpts interface
type mockSenderOpts struct {
	ctrl     *gomock.Controller
	recorder *mockSenderOptsMockRecorder
}

// MockSenderOptsMockRecorder is the mock recorder for MockSenderOpts
type mockSenderOptsMockRecorder struct {
	mock *mockSenderOpts
}

// NewMockSenderOpts creates a new mock instance
func newMockSenderOpts(ctrl *gomock.Controller) *mockSenderOpts {
	mock := &mockSenderOpts{ctrl: ctrl}
	mock.recorder = &mockSenderOptsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockSenderOpts) EXPECT() *mockSenderOptsMockRecorder {
	return m.recorder
}
