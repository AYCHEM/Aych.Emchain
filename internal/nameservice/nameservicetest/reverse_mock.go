// Copyright 2019 Finobo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: reverse.go

// Package nameservicetest is a generated GoMock package.
package nameservicetest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReverseLookup is a mock of ReverseLookup interface
type MockReverseLookup struct {
	ctrl     *gomock.Controller
	recorder *MockReverseLookupMockRecorder
}

// MockReverseLookupMockRecorder is the mock recorder for MockReverseLookup
type MockReverseLookupMockRecorder struct {
	mock *MockReverseLookup
}

// NewMockReverseLookup creates a new mock instance
func NewMockReverseLookup(ctrl *gomock.Controller) *MockReverseLookup {
	mock := &MockReverseLookup{ctrl: ctrl}
	mock.recorder = &MockReverseLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReverseLookup) EXPECT() *MockReverseLookupMockRecorder {
	return m.recorder
}

// ResolveAddress mocks base method
func (m *MockReverseLookup) ResolveAddress(ctx context.Context, protocol, network string, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAddress", ctx, protocol, network, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAddress indicates an expected call of ResolveAddress
func (mr *MockReverseLookupMockRecorder) ResolveAddress(ctx, protocol, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAddress", reflect.TypeOf((*MockReverseLookup)(nil).ResolveAddress), ctx, protocol, network, address)
}
